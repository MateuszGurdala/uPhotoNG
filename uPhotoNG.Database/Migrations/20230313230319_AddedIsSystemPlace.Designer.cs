// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using uPhotoNG.Database;

#nullable disable

namespace uPhotoNG.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230313230319_AddedIsSystemPlace")]
    partial class AddedIsSystemPlace
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("uPhotoNG.Models.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemAlbum")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Name", "OwnerId")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("FileName", "OwnerId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemPlace")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name", "CreatedBy")
                        .IsUnique();

                    b.ToTable("Places");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.Tag", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.HasKey("Value");

                    b.HasIndex("Value");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("binary(256)");

                    b.Property<string>("Surname")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("uPhotoNG.Models.Intersections.PhotoTag", b =>
                {
                    b.Property<string>("PhotoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TagValue")
                        .HasColumnType("varchar(20)");

                    b.HasKey("PhotoId", "TagValue");

                    b.HasIndex("PhotoId");

                    b.HasIndex("TagValue");

                    b.ToTable("PhotoTags");
                });

            modelBuilder.Entity("uPhotoNG.Models.Intersections.UserAlbum", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("uPhotoNG.Models.Intersections.UserPlace", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PlaceId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlaces");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.Album", b =>
                {
                    b.HasOne("uPhotoNG.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.Photo", b =>
                {
                    b.HasOne("uPhotoNG.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("uPhotoNG.Models.Entities.Place", b =>
                {
                    b.HasOne("uPhotoNG.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("uPhotoNG.Models.Intersections.PhotoTag", b =>
                {
                    b.HasOne("uPhotoNG.Models.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("uPhotoNG.Models.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("uPhotoNG.Models.Intersections.UserAlbum", b =>
                {
                    b.HasOne("uPhotoNG.Models.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("uPhotoNG.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("uPhotoNG.Models.Intersections.UserPlace", b =>
                {
                    b.HasOne("uPhotoNG.Models.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("uPhotoNG.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
